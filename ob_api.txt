*obsidian-api*

The Obsidian.nvim Lua API.

==============================================================================

Table of contents

  obsidian.Client .......................................... |obsidian.Client|
  
  obsidian.Note .............................................. |obsidian.Note|
  
  obsidian.Workspace .................................... |obsidian.Workspace|
  
  obsidian.Path .............................................. |obsidian.Path|
  
------------------------------------------------------------------------------
Class ~
{obsidian.SearchOpts}

Fields ~
{sort} `(boolean|)`?
{include_templates} `(boolean|)`?
{ignore_case} `(boolean|)`?
{default} `(function?)`

------------------------------------------------------------------------------
                                                               *obsidian.Client*
                                    `Client`
The Obsidian client is the main API for programmatically interacting with obsidian.nvim's features
in Lua. To get the client instance, run:

`local client = require("obsidian").get_client()`

Class ~
{obsidian.Client} : obsidian.ABC

------------------------------------------------------------------------------
                                                         *obsidian.Client.new()*
                                 `Client.new`()
Create a new Obsidian client without additional setup.
This is mostly used for testing. In practice you usually want to obtain the existing
client through:

`require("obsidian").get_client()`

Return ~
`(obsidian.Client)`

------------------------------------------------------------------------------
                                             *obsidian.Client.search_defaults()*
                           `Client.search_defaults`()
Get the default search options.

Return ~
`(obsidian.SearchOpts)`

------------------------------------------------------------------------------
Class ~
{obsidian.TagLocation}

Fields ~
{tag} `(string)` The tag found.
{note} `(obsidian.Note)` The note instance where the tag was found.
{path} `(string|obsidian.Path)` The path to the note where the tag was found.
{line} `(integer)` The line number (1-indexed) where the tag was found.
{text} `(string)` The text (with whitespace stripped) of the line where the tag was found.
{tag_start} `(integer|? The)` index within 'text' where the tag starts.
{tag_end} `(integer|? The)` index within 'text' where the tag ends.

------------------------------------------------------------------------------
                                                   *obsidian.Client.find_tags()*
                   `Client.find_tags`({self}, {term}, {opts})
Find all tags starting with the given search term(s).

Parameters ~
{term} `(string|string[])` The search term.
{opts} `({ search: obsidian.SearchOpts|?, timeout: integer|? }|)`?

Return ~
`(obsidian.TagLocation[])`

------------------------------------------------------------------------------
                                             *obsidian.Client.find_tags_async()*
          `Client.find_tags_async`({self}, {term}, {callback}, {opts})
An async version of 'find_tags()'.

Parameters ~
{term} `(string|string[])` The search term.
{callback} `(fun(tags: obsidian.TagLocation[]))`
{opts} `({ search: obsidian.SearchOpts }|)`?

------------------------------------------------------------------------------
Class ~
{obsidian.BacklinkMatches}

Fields ~
{note} `(obsidian.Note)` The note instance where the backlinks were found.
{path} `(string|obsidian.Path)` The path to the note where the backlinks were found.
{matches} `(obsidian.BacklinkMatch[])` The backlinks within the note.

------------------------------------------------------------------------------
Class ~
{obsidian.BacklinkMatch}

Fields ~
{line} `(integer)` The line number (1-indexed) where the backlink was found.
{text} `(string)` The text of the line where the backlink was found.

------------------------------------------------------------------------------
                                              *obsidian.Client.find_backlinks()*
                `Client.find_backlinks`({self}, {note}, {opts})
Find all backlinks to a note.

Parameters ~
{note} `(obsidian.Note)` The note to find backlinks for.
{opts} `({ search: obsidian.SearchOpts|?, timeout: integer|?, anchor: string|?, block: string|? }|)`?

Return ~
`(obsidian.BacklinkMatches[])`

------------------------------------------------------------------------------
                                        *obsidian.Client.find_backlinks_async()*
       `Client.find_backlinks_async`({self}, {note}, {callback}, {opts})
An async version of 'find_backlinks()'.

Parameters ~
{note} `(obsidian.Note)` The note to find backlinks for.
{callback} `(fun(backlinks: obsidian.BacklinkMatches[]))`
{opts} `({ search: obsidian.SearchOpts, anchor: string|?, block: string|? }|)`?

------------------------------------------------------------------------------
                                                   *obsidian.Client.list_tags()*
                 `Client.list_tags`({self}, {term}, {timeout})
Gather a list of all tags in the vault. If 'term' is provided, only tags that partially match the search
term will be included.

Parameters ~
{term} `(string|? An)` optional search term to match tags
{timeout} `(integer|? Timeout)` in milliseconds

Return ~
`(string[])`

------------------------------------------------------------------------------
                                             *obsidian.Client.list_tags_async()*
              `Client.list_tags_async`({self}, {term}, {callback})
An async version of 'list_tags()'.

Parameters ~
{term} `(string|)`?
{callback} `(fun(tags: string[]))`

------------------------------------------------------------------------------
@class obsidian.note.NoteCreationOpts
@field notes_subdir string
@field note_id_func fun()
@field new_notes_location string

------------------------------------------------------------------------------
@class obsidian.note.NoteOpts
@field title string|? The note's title
@field id string|? An ID to assign the note. If not specified one will be generated.
@field dir string|obsidian.Path|? An optional directory to place the note in. Relative paths will be interpreted
relative to the workspace / vault root. If the directory doesn't exist it will
be created, regardless of the value of the `should_write` option.
@field aliases string[]|? Aliases for the note
@field tags string[]|?  Tags for this note
@field should_write boolean|? Don't write the note to disk
@field template string|? The name of the template

------------------------------------------------------------------------------
Class ~
{obsidian.note.NoteSaveOpts}
Specify a path to save to. Defaults to `self.path`.
Fields ~
{path} `(optional)` `(string|obsidian.Path)`
Whether to insert/update frontmatter. Defaults to `true`.
{insert_frontmatter} `(optional)` `(boolean)`
Override the frontmatter. Defaults to the result of `self:frontmatter()`.
{frontmatter} `(optional)` `(table)`
A function to update the contents of the note. This takes a list of lines representing the text to be written
excluding frontmatter, and returns the lines that will actually be written (again excluding frontmatter).
{update_content} `(optional)` `(fun(lines: string[]): string[])`
Whether to call |checktime| on open buffers pointing to the written note. Defaults to true.
When enabled, Neovim will warn the user if changes would be lost and/or reload the updated file.
See `:help checktime` to learn more.
{check_buffers} `(optional)` `(boolean)`

------------------------------------------------------------------------------
Class ~
{obsidian.note.NoteWriteOpts}
Specify a path to save to. Defaults to `self.path`.
Fields ~
{path} `(optional)` `(string|obsidian.Path)`
The name of a template to use if the note file doesn't already exist.
{template} `(optional)` `(string)`
A function to update the contents of the note. This takes a list of lines representing the text to be written
excluding frontmatter, and returns the lines that will actually be written (again excluding frontmatter).
{update_content} `(optional)` `(fun(lines: string[]): string[])`
Whether to call |checktime| on open buffers pointing to the written note. Defaults to true.
When enabled, Neovim will warn the user if changes would be lost and/or reload each buffer's content.
See `:help checktime` to learn more.
{check_buffers} `(optional)` `(boolean)`

------------------------------------------------------------------------------
Class ~
{obsidian.note.HeaderAnchor}

Fields ~
{anchor} `(string)`
{header} `(string)`
{level} `(integer)`
{line} `(integer)`
{parent} `(obsidian.note.HeaderAnchor|)`?

------------------------------------------------------------------------------
Class ~
{obsidian.note.Block}

Fields ~
{id} `(string)`
{line} `(integer)`
{block} `(string)`

------------------------------------------------------------------------------
                                                                 *obsidian.Note*
                                     `Note`
A class that represents a note within a vault.

Class ~
{obsidian.Note} : obsidian.ABC

Fields ~
{id} `(string)`
{aliases} `(string[])`
{title} `(string|)`?
{tags} `(string[])`
{path} `(obsidian.Path|)`?
{metadata} `(table|)`?
{has_frontmatter} `(boolean|)`?
{frontmatter_end_line} `(integer|)`?
{contents} `(string[]|)`?
{anchor_links} `(table<string, obsidian.note.HeaderAnchor>|)`?
{blocks} `(table<string, obsidian.note.Block>?)`
{alt_alias} `(string|)`?
{bufnr} `(integer|)`?

------------------------------------------------------------------------------
                                                        *obsidian.generate_id()*
                 `generate_id`({title}, {path}, {alt_id_func})
Generate a unique ID for a new note. This respects the user's `note_id_func` if configured,
otherwise falls back to generated a Zettelkasten style ID.

@param title? string
@param path? obsidian.Path
@param alt_id_func? (fun(title: string|?, path: obsidian.Path|?): string)
Return ~
`(string)`

------------------------------------------------------------------------------
                                            *obsidian.Note._get_creation_opts()*
                       `Note._get_creation_opts`({opts})
Selects the strategy to use when resolving the note title, id, and path
@param opts obsidian.note.NoteOpts The note creation options
@return obsidian.note.NoteCreationOpts The strategy to use for creating the note
@private

------------------------------------------------------------------------------
                                                        *obsidian.Note.create()*
                             `Note.create`({opts})
Creates a new note

@param opts obsidian.note.NoteOpts Options
@return obsidian.Note

------------------------------------------------------------------------------
                                                           *obsidian.Note.new()*
                  `Note.new`({id}, {aliases}, {tags}, {path})
Instantiates a new Note object

Keep in mind that you have to call `note:save(...)` to create/update the note on disk.

@param id string|number
@param aliases string[]
@param tags string[]
@param path string|obsidian.Path|?
@return obsidian.Note

------------------------------------------------------------------------------
                                                  *obsidian.Note.display_info()*
                      `Note.display_info`({self}, {opts})
Get markdown display info about the note.

Parameters ~
{opts} `({ label: string|?, anchor: obsidian.note.HeaderAnchor|?, block: obsidian.note.Block|? }|)`?

Return ~
`(string)`

------------------------------------------------------------------------------
                                                        *obsidian.Note.exists()*
                             `Note.exists`({self})
Check if the note exists on the file system.

Return ~
`(boolean)`

------------------------------------------------------------------------------
                                                         *obsidian.Note.fname()*
                              `Note.fname`({self})
Get the filename associated with the note.

Return ~
`(string| `(optional))``

------------------------------------------------------------------------------
                                                 *obsidian.Note.reference_ids()*
                      `Note.reference_ids`({self}, {opts})
Get a list of all of the different string that can identify this note via references,
including the ID, aliases, and filename.
Parameters ~
{opts} `({ lowercase: boolean|? }|)`?
Return ~
`(string[])`

------------------------------------------------------------------------------
                                                     *obsidian.Note.has_alias()*
                       `Note.has_alias`({self}, {alias})
Check if a note has a given alias.

Parameters ~
{alias} `(string)`

Return ~
`(boolean)`

------------------------------------------------------------------------------
                                                       *obsidian.Note.has_tag()*
                         `Note.has_tag`({self}, {tag})
Check if a note has a given tag.

Parameters ~
{tag} `(string)`

Return ~
`(boolean)`

------------------------------------------------------------------------------
                                                     *obsidian.Note.add_alias()*
                       `Note.add_alias`({self}, {alias})
Add an alias to the note.

Parameters ~
{alias} `(string)`

Return ~
`(boolean)` added True if the alias was added, false if it was already present.

------------------------------------------------------------------------------
                                                       *obsidian.Note.add_tag()*
                         `Note.add_tag`({self}, {tag})
Add a tag to the note.

Parameters ~
{tag} `(string)`

Return ~
`(boolean)` added True if the tag was added, false if it was already present.

------------------------------------------------------------------------------
                                                     *obsidian.Note.add_field()*
                    `Note.add_field`({self}, {key}, {value})
Add or update a field in the frontmatter.

Parameters ~
{key} `(string)`
{value} `(any)`

------------------------------------------------------------------------------
                                                     *obsidian.Note.get_field()*
                        `Note.get_field`({self}, {key})
Get a field in the frontmatter.

Parameters ~
{key} `(string)`

Return ~
`(any)` result

------------------------------------------------------------------------------
Class ~
{obsidian.note.LoadOpts}
Fields ~
{max_lines} `(integer|)`?
{load_contents} `(boolean|)`?
{collect_anchor_links} `(boolean|)`?
{collect_blocks} `(boolean|)`?

------------------------------------------------------------------------------
                                                     *obsidian.Note.from_file()*
                        `Note.from_file`({path}, {opts})
Initialize a note from a file.

Parameters ~
{path} `(string|obsidian.Path)`
{opts} `(obsidian.note.LoadOpts|)`?

Return ~
`(obsidian.Note)`

------------------------------------------------------------------------------
                                               *obsidian.Note.from_file_async()*
                     `Note.from_file_async`({path}, {opts})
An async version of `.from_file()`, i.e. it needs to be called in an async context.

Parameters ~
{path} `(string|obsidian.Path)`
{opts} `(obsidian.note.LoadOpts|)`?

Return ~
`(obsidian.Note)`

------------------------------------------------------------------------------
                                 *obsidian.Note.from_file_with_contents_async()*
              `Note.from_file_with_contents_async`({path}, {opts})
Like `.from_file_async()` but also returns the contents of the file as a list of lines.

Parameters ~
{path} `(string|obsidian.Path)`
{opts} `(obsidian.note.LoadOpts|)`?

Return ~
`(obsidian.Note)`,string[]

------------------------------------------------------------------------------
                                                   *obsidian.Note.from_buffer()*
                      `Note.from_buffer`({bufnr}, {opts})
Initialize a note from a buffer.

Parameters ~
{bufnr} `(integer|)`?
{opts} `(obsidian.note.LoadOpts|)`?

Return ~
`(obsidian.Note)`

------------------------------------------------------------------------------
                                                  *obsidian.Note.display_name()*
                          `Note.display_name`({self})
Get the display name for note.

Return ~
`(string)`

------------------------------------------------------------------------------
                                                    *obsidian.Note.from_lines()*
                   `Note.from_lines`({lines}, {path}, {opts})
Initialize a note from an iterator of lines.

Parameters ~
{lines} `(fun(): string|? | Iter)`
{path} `(string|obsidian.Path)`
{opts} `(obsidian.note.LoadOpts|)`?

Return ~
`(obsidian.Note)`

------------------------------------------------------------------------------
                                                   *obsidian.Note.frontmatter()*
                           `Note.frontmatter`({self})
Get the frontmatter table to save.

Return ~
`(table)`

------------------------------------------------------------------------------
                                             *obsidian.Note.frontmatter_lines()*
             `Note.frontmatter_lines`({self}, {eol}, {frontmatter})
Get frontmatter lines that can be written to a buffer.

Parameters ~
{eol} `(boolean|)`?
{frontmatter} `(table|)`?

Return ~
`(string[])`

------------------------------------------------------------------------------
                                            *obsidian.Note.update_frontmatter()*
                   `Note.update_frontmatter`({self}, {bufnr})
Update the frontmatter in a buffer for the note.

Parameters ~
{bufnr} `(integer|)`?

Return ~
`(boolean)` updated If the the frontmatter was updated.

------------------------------------------------------------------------------
                                        *obsidian.is_in_frontmatter_blacklist()*
                     `is_in_frontmatter_blacklist`({note})
Checks if the parameter note is in the blacklist of files which shouldn't have
frontmatter applied

@param note obsidian.Note The note
@return boolean true if so

------------------------------------------------------------------------------
                                       *obsidian.Note.should_save_frontmatter()*
                     `Note.should_save_frontmatter`({self})
Determines whether a note's frontmatter is managed by obsidian.nvim.

Return ~
`(boolean)`

------------------------------------------------------------------------------
                                                         *obsidian.Note.write()*
                          `Note.write`({self}, {opts})
Write the note to disk.

Parameters ~
{opts} `(optional)` `(obsidian.note.NoteWriteOpts)`
Return ~
`(obsidian.Note)`

------------------------------------------------------------------------------
                                                          *obsidian.Note.save()*
                          `Note.save`({self}, {opts})
Save the note to a file.
In general this only updates the frontmatter and header, leaving the rest of the contents unchanged
unless you use the `update_content()` callback.

Parameters ~
{opts} `(optional)` `(obsidian.note.NoteSaveOpts)`

------------------------------------------------------------------------------
                                               *obsidian.Note.write_to_buffer()*
                     `Note.write_to_buffer`({self}, {opts})
Write the note to a buffer.

Parameters ~
{opts} `({ bufnr: integer|?, template: string|? }|? Options.)`

Options:
 - `bufnr`: Override the buffer to write to. Defaults to current buffer.
 - `template`: The name of a template to use if the buffer is empty.

Return ~
`(boolean)` updated If the buffer was updated.

------------------------------------------------------------------------------
                                                *obsidian.Note.save_to_buffer()*
                     `Note.save_to_buffer`({self}, {opts})
Save the note to the buffer

Parameters ~
{opts} `({ bufnr: integer|?, insert_frontmatter: boolean|?, frontmatter: table|? }|? Options.)`

Return ~
`(boolean)` updated True if the buffer lines were updated, false otherwise.

------------------------------------------------------------------------------
                                           *obsidian.Note.resolve_anchor_link()*
               `Note.resolve_anchor_link`({self}, {anchor_link})
Try to resolve an anchor link to a line number in the note's file.

Parameters ~
{anchor_link} `(string)`
Return ~
`(obsidian.note.HeaderAnchor| `(optional))``

------------------------------------------------------------------------------
                                                 *obsidian.Note.resolve_block()*
                    `Note.resolve_block`({self}, {block_id})
Try to resolve a block identifier.

Parameters ~
{block_id} `(string)`

Return ~
`(obsidian.note.Block| `(optional))``

------------------------------------------------------------------------------
                                                          *obsidian.Note.open()*
                      `Note.open`({note_or_path}, {opts})
Open a note in a buffer.

Parameters ~
{note_or_path} `(string|obsidian.Path|obsidian.Note)`
{opts} `({ line: integer|?, col: integer|?, open_strategy: obsidian.config.OpenStrategy|?, sync: boolean|?, callback: fun(bufnr: integer)|? }|)`?

------------------------------------------------------------------------------
Class ~
{obsidian.workspace.WorkspaceSpec}

Fields ~
{path} `(string|(fun(): string)|obsidian.Path|(fun(): obsidian.Path))`
{name} `(string|)`?
{strict} `(boolean|? If)` true, the workspace root will be fixed to 'path' instead of the vault root (if different).
{overrides} `(table|obsidian.config.ClientOpts?)`

------------------------------------------------------------------------------
                                                            *obsidian.Workspace*
                                  `Workspace`
Each workspace represents a working directory (usually an Obsidian vault) along with
a set of configuration options specific to the workspace.

Workspaces are a little more general than Obsidian vaults as you can have a workspace
outside of a vault or as a subdirectory of a vault.

Class ~
{obsidian.Workspace} : obsidian.ABC

Fields ~
{name} `(string)` An arbitrary name for the workspace.
{path} `(obsidian.Path)` The normalized path to the workspace.
{root} `(obsidian.Path)` The normalized path to the vault root of the workspace. This usually matches 'path'.
{overrides} `(table|obsidian.config.ClientOpts|)`?
{locked} `(boolean|)`?

------------------------------------------------------------------------------
                                                    *obsidian.find_vault_root()*
                         `find_vault_root`({base_dir})
Find the vault root from a given directory.

This will traverse the directory tree upwards until a '.obsidian/' folder is found to
indicate the root of a vault, otherwise the given directory is used as-is.

Parameters ~
{base_dir} `(string|obsidian.Path)`

Return ~
`(obsidian.Path| `(optional))``

------------------------------------------------------------------------------
                                                      *obsidian.Workspace.new()*
                            `Workspace.new`({spec})
Create a new 'Workspace' object. This assumes the workspace already exists on the filesystem.

Parameters ~
{spec} `(obsidian.workspace.WorkspaceSpec|)`?

Return ~
`(obsidian.Workspace)`

------------------------------------------------------------------------------
                                                     *obsidian.Workspace.lock()*
                            `Workspace.lock`({self})
Lock the workspace.

------------------------------------------------------------------------------
                                                  *obsidian.Workspace._unlock()*
                          `Workspace._unlock`({self})
Unlock the workspace.

------------------------------------------------------------------------------
                                    *obsidian.Workspace.get_workspace_for_dir()*
           `Workspace.get_workspace_for_dir`({cur_dir}, {workspaces})
Get the workspace corresponding to the directory (or a parent of), if there
is one.

Parameters ~
{cur_dir} `(string|obsidian.Path)`
{workspaces} `(obsidian.workspace.WorkspaceSpec[])`

Return ~
`(obsidian.Workspace| `(optional))``

------------------------------------------------------------------------------
                                                      *obsidian.Workspace.set()*
                      `Workspace.set`({workspace}, {opts})
1. Set Obsidian.workspace, Obsidian.dir, and opts
2. Make sure all the directories exists
3. fire callbacks and exec autocmd event

Parameters ~
{workspace} `(obsidian.Workspace)`
{opts} `({ lock: boolean|? }|)`?

------------------------------------------------------------------------------
                                                   *obsidian.Workspace.switch()*
                    `Workspace.switch`({workspace}, {opts})
Parameters ~
{workspace} `(string)` name of workspace
{opts} `({ lock: boolean|? }|)`?

------------------------------------------------------------------------------
                                                         *obsidian.cached_get()*
                      `cached_get`({path}, {k}, {factory})
Parameters ~
{path} `(table)`
{k} `(string)`
{factory} `(fun(path: obsidian.Path): any)`

------------------------------------------------------------------------------
                                                                 *obsidian.Path*
                                     `Path`
A `Path` class that provides a subset of the functionality of the Python `pathlib` library while
staying true to its API. It improves on a number of bugs in `plenary.path`.

Class ~
{obsidian.Path} : obsidian.ABC

Fields ~
{filename} `(string)` The underlying filename as a string.
{name} `(string|? The)` final path component, if any.
{suffix} `(string|? The)` final extension of the path, if any.
{suffixes} `(string[])` A list of all of the path's extensions.
{stem} `(string|? The)` final path component, without its suffix.

------------------------------------------------------------------------------
                                                   *obsidian.Path.is_path_obj()*
                           `Path.is_path_obj`({path})
Check if an object is an `obsidian.Path` object.

Parameters ~
{path} `(any)`

Return ~
`(boolean)`

------------------------------------------------------------------------------

Constructors.

------------------------------------------------------------------------------
                                                           *obsidian.Path.new()*
                               `Path.new`({...})
Create a new path from a string.

Parameters ~
{...} `(string|obsidian.Path)`

Return ~
`(obsidian.Path)`

------------------------------------------------------------------------------
                                                          *obsidian.Path.temp()*
                              `Path.temp`({opts})
Get a temporary path with a unique name.

Parameters ~
{opts} `({ suffix: string|? }|)`?

Return ~
`(obsidian.Path)`

------------------------------------------------------------------------------
                                                           *obsidian.Path.cwd()*
                                  `Path.cwd`()
Get a path corresponding to the current working directory as given by `vim.uv.cwd()`.

Return ~
`(obsidian.Path)`

------------------------------------------------------------------------------
                                                        *obsidian.Path.buffer()*
                             `Path.buffer`({bufnr})
Get a path corresponding to a buffer.

Parameters ~
{bufnr} `(integer|? The)` buffer number or `0` / `nil` for the current buffer.

Return ~
`(obsidian.Path)`

------------------------------------------------------------------------------
                                                       *obsidian.Path.buf_dir()*
                            `Path.buf_dir`({bufnr})
Get a path corresponding to the parent of a buffer.

Parameters ~
{bufnr} `(integer|? The)` buffer number or `0` / `nil` for the current buffer.

Return ~
`(obsidian.Path)`

------------------------------------------------------------------------------

Pure path methods.

------------------------------------------------------------------------------
                                                   *obsidian.Path.with_suffix()*
             `Path.with_suffix`({self}, {suffix}, {should_append})
Return a new path with the suffix changed.

Parameters ~
{suffix} `(string)`
{should_append} `(boolean|? should)` the suffix append a suffix instead of replacing one which may be there?

Return ~
`(obsidian.Path)`

------------------------------------------------------------------------------
                                                   *obsidian.Path.is_absolute()*
                           `Path.is_absolute`({self})
Returns true if the path is already in absolute form.

Return ~
`(boolean)`

------------------------------------------------------------------------------
                                                      *obsidian.Path.joinpath()*
                         `Path.joinpath`({self}, {...})
Parameters ~
{...} `(obsidian.Path|string)`
Return ~
`(obsidian.Path)`

------------------------------------------------------------------------------
                                                   *obsidian.Path.relative_to()*
                      `Path.relative_to`({self}, {other})
Try to resolve a version of the path relative to the other.
An error is raised when it's not possible.

Parameters ~
{other} `(obsidian.Path|string)`

Return ~
`(obsidian.Path)`

------------------------------------------------------------------------------
                                                        *obsidian.Path.parent()*
                             `Path.parent`({self})
The logical parent of the path.

Return ~
`(obsidian.Path| `(optional))``

------------------------------------------------------------------------------
                                                       *obsidian.Path.parents()*
                             `Path.parents`({self})
Get a list of the parent directories.

Return ~
`(obsidian.Path[])`

------------------------------------------------------------------------------
                                                  *obsidian.Path.is_parent_of()*
                      `Path.is_parent_of`({self}, {other})
Check if the path is a parent of other. This is a pure path method, so it only checks by
comparing strings. Therefore in practice you probably want to `:resolve()` each path before
using this.

Parameters ~
{other} `(obsidian.Path|string)`

Return ~
`(boolean)`

------------------------------------------------------------------------------

Concrete path methods.

------------------------------------------------------------------------------
                                                       *obsidian.Path.resolve()*
                         `Path.resolve`({self}, {opts})
Make the path absolute, resolving any symlinks.
If `strict` is true and the path doesn't exist, an error is raised.

Parameters ~
{opts} `({ strict: boolean }|)`?

Return ~
`(obsidian.Path)`

------------------------------------------------------------------------------
                                                          *obsidian.Path.stat()*
                              `Path.stat`({self})
Get OS stat results.

Return ~
`(table| `(optional))``

------------------------------------------------------------------------------
                                                        *obsidian.Path.exists()*
                             `Path.exists`({self})
Check if the path points to an existing file or directory.

Return ~
`(boolean)`

------------------------------------------------------------------------------
                                                       *obsidian.Path.is_file()*
                             `Path.is_file`({self})
Check if the path points to an existing file.

Return ~
`(boolean)`

------------------------------------------------------------------------------
                                                        *obsidian.Path.is_dir()*
                             `Path.is_dir`({self})
Check if the path points to an existing directory.

Return ~
`(boolean)`

------------------------------------------------------------------------------
                                                         *obsidian.Path.mkdir()*
                          `Path.mkdir`({self}, {opts})
Create a new directory at the given path.

Parameters ~
{opts} `({ mode: integer|?, parents: boolean|?, exist_ok: boolean|? }|)`?

------------------------------------------------------------------------------
                                                         *obsidian.Path.rmdir()*
                              `Path.rmdir`({self})
Remove the corresponding directory. This directory must be empty.

------------------------------------------------------------------------------
                                                        *obsidian.Path.rmtree()*
                             `Path.rmtree`({self})
Recursively remove an entire directory and its contents.

------------------------------------------------------------------------------
                                                         *obsidian.Path.touch()*
                          `Path.touch`({self}, {opts})
Create a file at this given path.

Parameters ~
{opts} `({ mode: integer|?, exist_ok: boolean|? }|)`?

------------------------------------------------------------------------------
                                                        *obsidian.Path.rename()*
                        `Path.rename`({self}, {target})
Rename this file or directory to the given target.

Parameters ~
{target} `(obsidian.Path|string)`

Return ~
`(obsidian.Path)`

------------------------------------------------------------------------------
                                                        *obsidian.Path.unlink()*
                         `Path.unlink`({self}, {opts})
Remove the file.

Parameters ~
{opts} `({ missing_ok: boolean|? }|)`?

------------------------------------------------------------------------------
                                           *obsidian.Path.vault_relative_path()*
                   `Path.vault_relative_path`({self}, {opts})
Make a path relative to the vault root, if possible, return a string

Parameters ~
{opts} `({ strict: boolean|? }|)`?

Return ~
`(string)` `(optional)`

 vim:tw=78:ts=8:noet:ft=help:norl: